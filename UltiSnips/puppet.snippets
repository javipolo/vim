snippet link "Puppet file link"
file { '${1:FILENAME}':
  target => '$2',
  owner  => '${3:root}',
  group  => '$3',
  mode   => '${4:755}',
  ensure => 'link',
}
endsnippet

snippet f "Puppet file description"
file { '${1:FILENAME}':
  mode    => '${3:755}',
  owner   => '${2:root}',
  group   => '$2',
  ensure  => present,
  source  => '${3:puppet:///modules/}',
}
endsnippet

snippet nfs "NFS mounts"
mount { '${1:/mnt/nfs/}':
  device  => '${2:nas:/mnt/nas/}',
  fstype  => 'nfs',
  ensure  => 'mounted',
  options => 'auto,noatime,hard,intr,tcp,rsize=32768,wsize=32768,ac,acregmin=30',
}
endsnippet

snippet mkdirp "Recursive mkdir"
funciones::mkdirp { '$1':
  owner => '${2:root}',
  group => '$2',
  mode  => '${3:775}',
}
endsnippet


snippet confd "Create conf.d resource for generating configs from chunks of configs" b
  exec { 'rebuild_${1:progname}':
    command     => 'cat /etc/$1/conf.d/* > /etc/${2:configfile}',
    path        => [ '/bin' , '/usr/bin' ],
    refreshonly => true,
    notify      => Service['$1'],
  }

  enalquiler::$1::conf { 'base': precedence => '01' }

# REMEMBER TO MOVE THIS DEFINE OUTSIDE OF THE CLASS
define enalquiler::$1::conf ( $precedence = '10' ) {

  file { "/etc/$1/conf.d/${precedence}-${name}":
    mode    => '755',
    owner   => 'root',
    group   => 'root',
    ensure  => present,
    content => template("enalquiler/$1/${name}.conf.erb"),
    require => File['/etc/$1/conf.d'],
    notify  => Exec['rebuild_$1'],
  }

}
endsnippet

# Default Snippets for Puppet

snippet /^class/ "Class declaration" r
class ${1:name} {
  ${0:# body}
}
endsnippet

snippet File "Defaults for file" b
File {
  owner => '${1:username}',
  group => '${2:groupname}',
}
endsnippet

# Resource types
snippet package "Package resource type" b
package { '${1:name}':
  ensure => '${2:installed}',
}
endsnippet

snippet file "File resource type" b
file { '${1:name}':
  source => 'puppet://${2:path}',
  mode   => '${3:mode}',
}
endsnippet

snippet group "Group resource type" b
group { '${1:groupname}':
  ensure => '${3:present}',
  gid    => '${2:gid}',
}
endsnippet

snippet user "user resource type" b
user { '${1:username}':
  ensure     => '${2:present}',
  uid        => '${3:uid}',
  gid        => '${4:gid}',
  comment    => '${5:gecos}',
  home       => '${6:homedirectory}',
  homeagain       => '$6',
  managehome => false,
  require    => Group['${7:group}'],
}
endsnippet

snippet exec "Exec resource type" b
exec { '${1:command}':
  path => [ '/bin' , ${2:'/usr/bin'} ]
  ${3:refreshonly => true,}
}
endsnippet

snippet cron "Cron resource type" b
cron { '${1:name}':
  user    => '${2:user}',
  command => '${3:command}',
  minute  => '${3:minute}',
  hour    => '${4:hour}',
}
endsnippet

snippet mount "Mount resource type" b
mount { '${1:path}':
  device  => '${2:/dev}',
  fstype  => '${3:filesystem}',
  ensure  => 'mounted',
  options => 'rw,errors=remount-ro',
}
endsnippet

snippet service "Service resource type" b
service { '${1:name}':
  hasstatus => true,
  enable    => true,
  ensure    => 'running',
}
endsnippet

# vim:ft=snippets:
